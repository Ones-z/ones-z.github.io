<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>异步队列，让你的程序不阻塞</title>
      <link href="/2023/01/09/Fastapi/realtime/"/>
      <url>/2023/01/09/Fastapi/realtime/</url>
      
        <content type="html"><![CDATA[<p>队列常用于实现生产者-消费者模式。生产者向队列中放入数据，消费者从队列中取出数据进行处理。队列提供了一个缓冲区，使得生产者和消费者可以异步执行，实现解耦和高效处理。</p><span id="more"></span><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">mq = queue.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealTimeLogging</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">item: <span class="built_in">str</span>, level=<span class="string">&quot;INFO&quot;</span></span>):</span><br><span class="line">        mq.put(<span class="string">f&quot;<span class="subst">&#123;datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>[<span class="subst">&#123;level&#125;</span>]: <span class="subst">&#123;item&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        RealTimeLogging.put(item, level=<span class="string">&quot;DEBUG&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        RealTimeLogging.put(item, level=<span class="string">&quot;INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warning</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        RealTimeLogging.put(item, level=<span class="string">&quot;WARNING&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        RealTimeLogging.put(item, level=<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">critical</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        RealTimeLogging.put(item, level=<span class="string">&quot;CRITICAL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">count: <span class="built_in">int</span></span>):</span><br><span class="line">        data = [mq.get_nowait() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count) <span class="keyword">if</span> <span class="keyword">not</span> mq.empty()]</span><br><span class="line">        [mq.task_done() <span class="keyword">for</span> _ <span class="keyword">in</span> data]</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h2 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">mq = asyncio.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealTimeLogging</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">item: <span class="built_in">str</span>, level=<span class="string">&quot;INFO&quot;</span></span>):</span><br><span class="line">        <span class="keyword">await</span> mq.put(<span class="string">f&quot;<span class="subst">&#123;datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>[<span class="subst">&#123;level&#125;</span>]: <span class="subst">&#123;item&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">await</span> RealTimeLogging.put(item, level=<span class="string">&quot;DEBUG&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">await</span> RealTimeLogging.put(item, level=<span class="string">&quot;INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">warning</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">await</span> RealTimeLogging.put(item, level=<span class="string">&quot;WARNING&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">await</span> RealTimeLogging.put(item, level=<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">critical</span>(<span class="params">item: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">await</span> RealTimeLogging.put(item, level=<span class="string">&quot;CRITICAL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">count: <span class="built_in">int</span></span>):</span><br><span class="line">        data = [mq.get_nowait() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count) <span class="keyword">if</span> <span class="keyword">not</span> mq.empty()]</span><br><span class="line">        [mq.task_done() <span class="keyword">for</span> _ <span class="keyword">in</span> data]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">runSmoke</span>(<span class="params">config: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="comment"># 遍历配置</span></span><br><span class="line">    <span class="keyword">for</span> _<span class="keyword">case</span> <span class="keyword">in</span> config:</span><br><span class="line">        <span class="comment"># 处理前置条件</span></span><br><span class="line">        <span class="keyword">if</span> _<span class="keyword">case</span>[<span class="string">&quot;setup&quot;</span>]:</span><br><span class="line">            <span class="keyword">for</span> setup <span class="keyword">in</span> _<span class="keyword">case</span>[<span class="string">&quot;setup&quot;</span>]:</span><br><span class="line">                <span class="keyword">await</span> RealTimeLogging.info(<span class="string">f&#x27;&#x27;&#x27;前置条件: &quot;<span class="subst">&#123;setup&#125;</span>&quot;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    _<span class="keyword">case</span>[<span class="string">&quot;Mysql&quot;</span>]._edit(setup)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">await</span> RealTimeLogging.error(e)</span><br><span class="line">                    <span class="keyword">await</span> RealTimeLogging.error(<span class="string">&quot;SQL发生错误，前置处理失败\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/real-time&quot;</span>, summary=<span class="string">&quot;返回队列&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">count: <span class="built_in">int</span> = <span class="number">10</span></span>):</span><br><span class="line">    data = <span class="keyword">await</span> RealTimeLogging.get(count)</span><br><span class="line">    <span class="keyword">return</span> BaseResponse.success(data)</span><br></pre></td></tr></table></figure><h2 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [log, setLog] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readRealTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  realTimeLog.<span class="property">current</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">realTime</span>(<span class="number">10</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setLog</span>(<span class="function">(<span class="params">prevData</span>) =&gt;</span> prevData + item)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;log&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy的异步模式</title>
      <link href="/2022/08/16/Fastapi/sqlalchemy/"/>
      <url>/2022/08/16/Fastapi/sqlalchemy/</url>
      
        <content type="html"><![CDATA[<p>SQLAlchemy是一个Python编程语言下的开源SQL工具库，它提供了一组高效、灵活和可扩展的API，用于处理关系型数据库。SQLAlchemy提供了面向对象的方式来操作数据库，使得开发人员可以更方便地进行数据库访问和操作，同时也提供了较高的性能和安全性。</p><span id="more"></span><h1 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h1><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="SQLAlchemy-Core"><a href="#SQLAlchemy-Core" class="headerlink" title="SQLAlchemy Core"></a>SQLAlchemy Core</h3><p>SQLAlchemy Core提供了一个高层次的SQL表达式语言，允许你使用Python语言编写SQL命令，而不需要直接编写原始的SQL语句。这使得代码更清晰、易于维护，并且避免了SQL注入等安全问题。</p><h3 id="ORM（对象关系映射）"><a href="#ORM（对象关系映射）" class="headerlink" title="ORM（对象关系映射）"></a>ORM（对象关系映射）</h3><p>SQLAlchemy提供了一个强大的ORM框架，允许你通过定义Python类来表示数据库表和模型之间的映射关系。ORM将数据库的查询、插入、更新和删除等操作转化为面向对象的方法调用，使得开发人员能够以更自然的方式操作数据库，而无需直接编写SQL语句。</p><h3 id="连接池管理"><a href="#连接池管理" class="headerlink" title="连接池管理"></a>连接池管理</h3><p>SQLAlchemy提供了连接池管理功能，可以有效地管理和重用数据库连接，提高数据库查询的性能和效率。</p><h3 id="数据库适配器"><a href="#数据库适配器" class="headerlink" title="数据库适配器"></a>数据库适配器</h3><p>SQLAlchemy支持多种关系型数据库，包括MySQL、PostgreSQL、SQLite、Oracle等，通过不同的数据库适配器，可以将SQLAlchemy用于各种不同类型的数据库。</p><h3 id="构建异步模式"><a href="#构建异步模式" class="headerlink" title="构建异步模式"></a>构建异步模式</h3><h4 id="创建异步连接"><a href="#创建异步连接" class="headerlink" title="创建异步连接"></a>创建异步连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.asyncio <span class="keyword">import</span> AsyncSession, create_async_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base, sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.utils.configHandler <span class="keyword">import</span> ConfigHandler</span><br><span class="line"></span><br><span class="line">env = <span class="string">&quot;pro&quot;</span> <span class="keyword">if</span> <span class="string">&quot;APP_ENV&quot;</span> <span class="keyword">in</span> os.environ <span class="keyword">and</span> os.environ[<span class="string">&quot;APP_ENV&quot;</span>] == <span class="string">&quot;production&quot;</span> <span class="keyword">else</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">mysql_url = <span class="string">&quot;mysql+aiomysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8mb4&quot;</span>.<span class="built_in">format</span>(*ConfigHandler.getMysqlConfig(env))</span><br><span class="line"></span><br><span class="line">engine = create_async_engine(</span><br><span class="line">    mysql_url,</span><br><span class="line">    <span class="comment"># 查看原生语句（未格式化）,禁止终端显示sql日志</span></span><br><span class="line">    echo=<span class="literal">False</span>,</span><br><span class="line">    future=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line">Base = declarative_base(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建session元类</span></span><br><span class="line">AsyncSessionLocal: AsyncSession = sessionmaker(</span><br><span class="line">    class_=AsyncSession, </span><br><span class="line">    autocommit=<span class="literal">False</span>, </span><br><span class="line">    autoflush=<span class="literal">False</span>, </span><br><span class="line">    expire_on_commit=<span class="literal">False</span>, </span><br><span class="line">    bind=engine</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_db_AsyncSession</span>() -&gt; AsyncSession:</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncSessionLocal() <span class="keyword">as</span> AsyncSession:</span><br><span class="line">        <span class="keyword">yield</span> AsyncSession</span><br></pre></td></tr></table></figure><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB: AsyncSession = Depends(get_db_AsyncSession)</span><br></pre></td></tr></table></figure><h4 id="异步DTO"><a href="#异步DTO" class="headerlink" title="异步DTO"></a>异步DTO</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.asyncio <span class="keyword">import</span> AsyncSession</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> AppModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getall</span>(<span class="params"></span></span><br><span class="line"><span class="params">    db: AsyncSession, project_id: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>, app_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, host: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    filters = []</span><br><span class="line">    <span class="keyword">if</span> project_id:</span><br><span class="line">        filters.append(AppModel.project_id == project_id)</span><br><span class="line">    <span class="keyword">if</span> app_name:</span><br><span class="line">        filters.append(AppModel.app_name.like(<span class="string">f&quot;%<span class="subst">&#123;app_name&#125;</span>%&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        filters.append(AppModel.host.like(<span class="string">f&quot;%<span class="subst">&#123;host&#125;</span>%&quot;</span>))</span><br><span class="line">    data = <span class="keyword">await</span> db.execute(select(AppModel).where(and_(*filters)).order_by(AppModel.<span class="built_in">id</span>.desc()))</span><br><span class="line">    <span class="keyword">return</span> data.scalars().fetchall()</span><br></pre></td></tr></table></figure><h4 id="异步路由函数"><a href="#异步路由函数" class="headerlink" title="异步路由函数"></a>异步路由函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.crud <span class="keyword">import</span> appCrud</span><br><span class="line"><span class="keyword">from</span> app.db.async_mysql <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">from</span> app.utils.baseResponseHandler <span class="keyword">import</span> BaseResponse</span><br><span class="line"></span><br><span class="line">router = APIRouter(</span><br><span class="line">    prefix=<span class="string">&quot;/app&quot;</span>,</span><br><span class="line">    tags=[<span class="string">&quot;app&quot;</span>],</span><br><span class="line">    <span class="comment"># dependencies=[Depends(get_db)],</span></span><br><span class="line">    responses=&#123;<span class="number">404</span>: &#123;<span class="string">&quot;description&quot;</span>: <span class="string">&quot;Not found&quot;</span>&#125;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/list&quot;</span>, summary=<span class="string">&quot;获取应用列表&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">queryApps</span>(<span class="params"></span></span><br><span class="line"><span class="params">    pageSize: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    current: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    app_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    project_id: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    host: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    db=DB,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    _db = <span class="keyword">await</span> appCrud.getall(db, app_name=app_name, project_id=project_id, host=host)</span><br><span class="line">    <span class="keyword">return</span> BaseResponse.pagenation(_db[(current - <span class="number">1</span>) * pageSize : current * pageSize], current, <span class="built_in">len</span>(_db), pageSize)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="放置SQL链接超时"><a href="#放置SQL链接超时" class="headerlink" title="放置SQL链接超时"></a>放置SQL链接超时</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">engine = create_async_engine(</span><br><span class="line">    mysql_url,</span><br><span class="line">    <span class="comment"># echo=False, #查看原生语句（未格式化）,禁止终端显示sql日志</span></span><br><span class="line">    <span class="comment"># future=True, #设置是否使用异步 Future 版本的引擎，默认为 True。如果为 False，则会返回同步版本的引擎。</span></span><br><span class="line">    max_overflow=<span class="number">5</span>, <span class="comment">#指定连接池可容纳的最大溢出连接数，默认为 10。当连接池中的所有连接都被占用且达到 pool_size 时，额外的连接将被创建，直到达到 max_overflow 的限制。</span></span><br><span class="line">    pool_recycle=<span class="number">600</span>, <span class="comment">#设置连接的重置周期（以秒为单位）。当超过指定的时间后，连接将被自动关闭并重新创建，以防止连接长时间闲置或出现问题。</span></span><br><span class="line">    pool_pre_ping=<span class="literal">True</span>, <span class="comment">#重新连接的时候会先ping一下</span></span><br><span class="line">    pool_size=<span class="number">10</span>, <span class="comment">#指定数据库连接池的大小，默认为 5。连接池是用于管理数据库连接的，可以控制并发访问数据库的连接数量。</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖注入，给你的代码润色</title>
      <link href="/2022/04/02/Fastapi/dependency/"/>
      <url>/2022/04/02/Fastapi/dependency/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><blockquote><p>依赖注入是指在编程中，为了保证功能的使用，先导入或声明所需依赖，如子函数、数据库连接等。<br>依赖注入是一种设计模式，用于降低程序组件之间的耦合度。它通过将组件之间的依赖关系从代码中分离出来，使得组件可以更加灵活地被替换、修改或重用。</p></blockquote><h2 id="使用依赖注入的优势"><a href="#使用依赖注入的优势" class="headerlink" title="使用依赖注入的优势"></a>使用依赖注入的优势</h2><p>提高代码的复用率：</p><ul><li>共享数据库连接</li><li>增强安全、认证和角色管理</li><li>响应数据注入，可以在原来的响应数据基础上再做出更改，如抽出公用函数，在公用函数中对数据处理</li></ul><h2 id="如何使用依赖注入"><a href="#如何使用依赖注入" class="headerlink" title="如何使用依赖注入"></a>如何使用依赖注入</h2><h3 id="添加到函数"><a href="#添加到函数" class="headerlink" title="添加到函数"></a>添加到函数</h3><h4 id="函数作为依赖"><a href="#函数作为依赖" class="headerlink" title="函数作为依赖"></a>函数作为依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">common_parameters</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, page: <span class="built_in">int</span> = <span class="number">1</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;q&quot;</span>: q, <span class="string">&quot;page&quot;</span>: page, <span class="string">&quot;limit&quot;</span>: limit&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/dependency01&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">dependency01</span>(<span class="params">commons: <span class="built_in">dict</span> = Depends(<span class="params">common_parameters</span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> commons</span><br></pre></td></tr></table></figure><h4 id="类作为依赖"><a href="#类作为依赖" class="headerlink" title="类作为依赖"></a>类作为依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommonQueryParams</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, page: <span class="built_in">int</span> = <span class="number">1</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span><br><span class="line">        self.q = q</span><br><span class="line">        self.page = page</span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/classes_as_dependencies&quot;</span></span>)</span></span><br><span class="line"><span class="comment"># async def classes_as_dependencies(commons: CommonQueryParams = Depends(CommonQueryParams)):</span></span><br><span class="line"><span class="comment"># async def classes_as_dependencies(commons: CommonQueryParams = Depends()):</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">classes_as_dependencies</span>(<span class="params">commons=Depends(<span class="params">CommonQueryParams</span>)</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> commons.q:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;q&quot;</span>: commons.q&#125;)</span><br><span class="line">    items = fake_items_db[commons.page: commons.page + commons.limit]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;items&quot;</span>: items&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h4 id="多层嵌套依赖"><a href="#多层嵌套依赖" class="headerlink" title="多层嵌套依赖"></a>多层嵌套依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_query</span>(<span class="params">q: <span class="built_in">str</span> = Depends(<span class="params">query</span>), last_query: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> q:</span><br><span class="line">        <span class="keyword">return</span> last_query</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"><span class="meta">@app05.get(<span class="params"><span class="string">&quot;/sub_dependency&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">sub_dependency</span>(<span class="params">final_query: <span class="built_in">str</span> = Depends(<span class="params">sub_query, use_cache=<span class="literal">True</span></span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;sub_dependency&quot;</span>: final_query&#125;</span><br></pre></td></tr></table></figure><p>use_cache默认是True, 表示当多个依赖有一个共同的子依赖时，每次request请求只会调用子依赖一次，多次调用将从缓存中获取</p><h4 id="路径操作装饰器依赖"><a href="#路径操作装饰器依赖" class="headerlink" title="路径操作装饰器依赖"></a>路径操作装饰器依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">verify_token</span>(<span class="params">x_token: <span class="built_in">str</span> = Header(<span class="params">...</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;没有返回值的子依赖&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x_token != <span class="string">&quot;aaa&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">&quot;X-Token header invalid&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">verify_key</span>(<span class="params">x_key: <span class="built_in">str</span> = Header(<span class="params">...</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有返回值的子依赖，但是返回值不会被调用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x_key != <span class="string">&quot;bbb&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">&quot;X-Key header invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x_key</span><br><span class="line"></span><br><span class="line"><span class="meta">@app05.get(<span class="params"><span class="string">&quot;/dependency_in_path_operation&quot;</span>, dependencies=[Depends(<span class="params">verify_token</span>), Depends(<span class="params">verify_key</span>)]</span>)  </span><span class="comment"># 这时候不是在函数参数中调用依赖，而是在路径操作中</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">dependency_in_path_operation</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;user01&quot;</span>&#125;, &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;user02&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="yield依赖和子依赖"><a href="#yield依赖和子依赖" class="headerlink" title="yield依赖和子依赖"></a>yield依赖和子依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_db_AsyncSession</span>() -&gt; AsyncSession:</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncSessionLocal() <span class="keyword">as</span> AsyncSession:</span><br><span class="line">        <span class="keyword">yield</span> AsyncSession</span><br><span class="line"></span><br><span class="line">DB: AsyncSession = Depends(get_db_AsyncSession)</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/remove/&#123;id&#125;&quot;</span>, summary=<span class="string">&quot;删除应用&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delApp</span>(<span class="params"><span class="built_in">id</span>: <span class="built_in">int</span>, db=DB</span>):</span><br><span class="line">    data = <span class="keyword">await</span> appCrud.remove(db, <span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> BaseResponse.success(data)</span><br></pre></td></tr></table></figure><h3 id="添加到组件"><a href="#添加到组件" class="headerlink" title="添加到组件"></a>添加到组件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = APIRouter(dependencies=[Depends(verify_token), Depends(verify_key)])</span><br></pre></td></tr></table></figure><h3 id="添加到主程序"><a href="#添加到主程序" class="headerlink" title="添加到主程序"></a>添加到主程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)]）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提交代码之前格式化，你会吗</title>
      <link href="/2022/02/19/Fastapi/formatter/"/>
      <url>/2022/02/19/Fastapi/formatter/</url>
      
        <content type="html"><![CDATA[<p>一个项目整体的代码，拥有统一并且规范的代码风格无疑是非常重要的，特别是在使用Python这种动态语言开发的项目中。</p><span id="more"></span><h1 id="静态代码格式化"><a href="#静态代码格式化" class="headerlink" title="静态代码格式化"></a>静态代码格式化</h1><blockquote><p>为了在团队内部统一Python项目代码规范，借助pre-commit整合工具链，强制落地项目代码规范，实现在本地在提交代码时，根据已经设置好的的格式化规则自动格式化代码，显著提升团队的协同开发效率，以及降低bug产生概率。</p></blockquote><h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h2><p>pre-commit 是整个工作流最重要的一环，它是 git-hooks 中的一个重要的钩子，在键入提交信息前运行，常用于检查即将提交的快照，如果该钩子以非零值退出，Git 将放弃此次提交。</p><h2 id="有哪些hook呢"><a href="#有哪些hook呢" class="headerlink" title="有哪些hook呢"></a>有哪些hook呢</h2><ul><li>isort：规范 python 库导入顺序，并且对不同类型的pkg进行分组， 支持配置文件自定义规则。</li><li>black：代码格式化工具，支持配置文件自定义规则。</li><li>flake8：综合代码静态分析工具，用于检查代码风格、语法错误和一些常见的编码问题，主要关注代码的风格和语法问题，例如缩进、空格、行长度、命名约定等。</li><li>autoflake：用于自动化修复Python代码中的一些问题，例如删除未使用的导入(import)语句、删除无效的变量和代码行、移除未使用的代码等。</li><li>check-ast：分析Python代码的抽象语法树，实现代码验证、规范检查、重构优化、安全性分析和依赖关系分析等功能。</li><li>check-byte-order-marker：检查文本文件中的字节顺序标记（BOM）。</li><li>check-case-conflict：扫描代码库的文件名和路径，检查代码库中的文件名和路径的大小写冲突。</li><li>check-docstring-first：检查Python函数或方法的文档字符串（docstring）是否在定义的时候放置在首行。</li><li>check-executables-have-shebangs：检查可执行文件是否包含正确的 shebang。</li><li>check-json：检查 JSON 数据的有效性和格式正确性。</li><li>check-yaml：检查 YAML 数据的有效性和格式正确性。</li><li>debug-statements：检查代码库中是否存在调试语句（debug statements），并在提交之前阻止这些调试语句的提交。</li><li>detect-private-key：检测代码库中是否包含私密密钥文件，并在提交之前阻止这些文件的提交。</li><li>end-of-file-fixer：在提交之前自动修复文件末尾的行尾字符（end-of-file character）。</li><li>trailing-whitespace：检测和修复代码库中的行尾多余空白字符（trailing whitespace）。</li><li>mixed-line-ending：检测和修复代码库中混合使用的行尾字符（line endings）。</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pre-commit autoflake black isort flake8</span><br></pre></td></tr></table></figure><h3 id="requirements-txt安装"><a href="#requirements-txt安装" class="headerlink" title="requirements.txt安装"></a>requirements.txt安装</h3><p>requirements.txt 准备依赖如下：</p><ul><li>autoflake&#x3D;&#x3D;1.4</li><li>black&#x3D;&#x3D;22.8.0</li><li>isort&#x3D;&#x3D;5.10.1</li><li>pre-commit&#x3D;&#x3D;2.17.0</li><li>flake8&#x3D;&#x3D;5.0.4</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-根目录终端执行pre-commit-install，此时-git-hooks-pre-commit被覆盖"><a href="#1-根目录终端执行pre-commit-install，此时-git-hooks-pre-commit被覆盖" class="headerlink" title="1. 根目录终端执行pre-commit install，此时.git&#x2F;hooks&#x2F;pre-commit被覆盖"></a>1. 根目录终端执行pre-commit install，此时.git&#x2F;hooks&#x2F;pre-commit被覆盖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># File generated by pre-commit: https://pre-commit.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start templated</span></span><br><span class="line">INSTALL_PYTHON=/usr/local/opt/python@3.9/bin/python3.9</span><br><span class="line">ARGS=(hook-impl --config=.pre-commit-config.yaml --hook-type=pre-commit)</span><br><span class="line"><span class="comment"># end templated</span></span><br><span class="line"></span><br><span class="line">HERE=<span class="string">&quot;<span class="subst">$(cd <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span> &amp;&amp; pwd)</span>&quot;</span></span><br><span class="line">ARGS+=(--hook-dir <span class="string">&quot;<span class="variable">$HERE</span>&quot;</span> -- <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="string">&quot;<span class="variable">$INSTALL_PYTHON</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$INSTALL_PYTHON</span>&quot;</span> -mpre_commit <span class="string">&quot;<span class="variable">$&#123;ARGS[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">command</span> -v pre-commit &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> pre-commit <span class="string">&quot;<span class="variable">$&#123;ARGS[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;`pre-commit` not found.  Did you forget to activate your virtualenv?&#x27;</span> 1&gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上述代码指明config读取自根目录下的.pre-commit-config.yaml文件</p><h3 id="2-设置-git可见"><a href="#2-设置-git可见" class="headerlink" title="2. 设置 .git可见"></a>2. 设置 .git可见</h3><p>.git文件夹是不可见的，vscode工具已设置为不可见</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> </span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;**/.svn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;**/.hg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;**/CVS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;**/Thumbs.db&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时你可以更改”**&#x2F;.git”: false，vacode即可见.git文件夹</p><h3 id="3-根目录新建-pre-commit-config-yaml并配置"><a href="#3-根目录新建-pre-commit-config-yaml并配置" class="headerlink" title="3. 根目录新建.pre-commit-config.yaml并配置"></a>3. 根目录新建.pre-commit-config.yaml并配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">autoflake</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">移除不使用的变量和导入模块</span></span><br><span class="line">        <span class="attr">entry:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;autoflake &quot;$@&quot;; git add -u&#x27;</span> <span class="string">--</span></span><br><span class="line">        <span class="attr">language:</span> <span class="string">python</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          [</span><br><span class="line">            <span class="string">&quot;--in-place&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--remove-all-unused-imports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--remove-unused-variables&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--expand-star-imports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--ignore-init-module-imports&quot;</span>,</span><br><span class="line">          ]</span><br><span class="line">        <span class="attr">files:</span> <span class="string">\.py$</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">isort</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">导入模块排序</span></span><br><span class="line">        <span class="attr">entry:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;isort &quot;$@&quot;; git add -u&#x27;</span> <span class="string">--</span></span><br><span class="line">        <span class="attr">language:</span> <span class="string">python</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;--filter-files&quot;</span>]</span><br><span class="line">        <span class="attr">files:</span> <span class="string">\.py$</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">black</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">格式化python代码</span></span><br><span class="line">        <span class="attr">entry:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;black &quot;$@&quot;; git add -u&#x27;</span> <span class="string">--</span></span><br><span class="line">        <span class="attr">language:</span> <span class="string">python</span></span><br><span class="line">        <span class="attr">types:</span> [<span class="string">python</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;--line-length=120&quot;</span>]</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">flake8</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">综合代码静态分析工具，用于检查代码风格、语法错误和一些常见的编码问题</span></span><br><span class="line">        <span class="attr">entry:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;flake8 &quot;$@&quot;; git add -u&#x27;</span> <span class="string">--</span></span><br><span class="line">        <span class="attr">language:</span> <span class="string">python</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;--max-line-length=120&quot;</span>, <span class="string">&quot;--ignore=E303,E731,W191,W504,E402&quot;</span>, <span class="string">&quot;--exclude=__init__.py&quot;</span>]</span><br></pre></td></tr></table></figure><p>上述代码指明根据本地的hooks配置来做校验和格式化</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="将本地所有文件格式化"><a href="#将本地所有文件格式化" class="headerlink" title="将本地所有文件格式化"></a>将本地所有文件格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre-commit run --all-files</span><br></pre></td></tr></table></figure><p><img src="/2022/02/19/Fastapi/formatter/log.png" alt="格式化"></p><h3 id="提交代码自动格式化"><a href="#提交代码自动格式化" class="headerlink" title="提交代码自动格式化"></a>提交代码自动格式化</h3><p><font color="red">注意：首次耗时会比较长</font></p>]]></content>
      
      
      <categories>
          
          <category> Fastapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你考虑过使用函数运算缓存吗</title>
      <link href="/2021/11/20/Python/cache/"/>
      <url>/2021/11/20/Python/cache/</url>
      
        <content type="html"><![CDATA[<p>对那些需要高频率以相同参数运行的函数，或者需要重复加载的数据，如果每次都执行函数完整的代码，或者重复从文件加载数据进行处理，会试程序运行效率变低。改善效率可通过使用内存缓存或磁盘缓存的形式，从而提高代码效率。</p><span id="more"></span><h1 id="函数运算缓存"><a href="#函数运算缓存" class="headerlink" title="函数运算缓存"></a>函数运算缓存</h1><blockquote><p>函数运算缓存是一种优化技术，用于在函数被多次调用时缓存函数的计算结果，避免重复计算相同的输入。这可以提高函数的性能，尤其是当函数的计算开销较大时。</p></blockquote><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a>lru_cache</h3><p>functools.lru_cache装饰器可以接受以下参数：</p><ul><li>maxsize：指定缓存的最大大小，表示可以缓存多少个不同的函数调用结果。默认值为128。当缓存达到最大容量时，最近最少使用的结果会被移除，以便为新的结果腾出空间。</li><li>typed：指定是否对不同参数类型的函数调用进行分别缓存。默认值为False，即不区分参数类型。如果设置为True，则会对不同参数类型的函数调用进行分别缓存。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.lru_cache(<span class="params">maxsize=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用会进行计算，并缓存结果</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次调用会直接返回缓存的结果</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p><font color="red">内置模块，无需安装</font></p><h3 id="Cachier"><a href="#Cachier" class="headerlink" title="Cachier"></a>Cachier</h3><p>cachier装饰器可以接受以下参数来自定义缓存行为：</p><ul><li>stale_after：指定缓存的过期时间。可以传递一个datetime.timedelta对象，表示时间间隔。默认值为None，表示缓存永不过期。</li><li>cache_dir：指定缓存文件的目录路径。默认为当前工作目录下的.cachier文件夹。</li><li>hash_params：布尔值，指定是否将函数的参数用于计算哈希值。默认为False，表示不使用参数计算哈希值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> cachier <span class="keyword">import</span> cachier</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@cachier(<span class="params">stale_after=datetime.timedelta(<span class="params">seconds=<span class="number">10</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><font color="red">第三方模块，需要安装：pip3 install cachier</font></p><h3 id="Cachetools"><a href="#Cachetools" class="headerlink" title="Cachetools"></a>Cachetools</h3><p>cachetools是另一个Python库，它提供了用于缓存的工具类和装饰器。与cachier不同，cachetools库提供了更灵活的缓存策略和高级功能。</p><p>TTLCache是cachetools库提供的一个基于时间的缓存实现。在创建TTLCache对象时，可以传递以下参数来自定义缓存的行为：</p><ul><li>maxsize：指定缓存最多可以存储的项数。默认值为None，表示缓存没有大小限制。</li><li>ttl：指定缓存项的存活时间，单位为秒。默认值为None，表示缓存项没有存活时间限制。</li><li>timer：用于获取当前时间的函数。默认值为time.time，使用系统的计时器。</li><li>getsizeof：获取缓存项大小的函数。默认值为sys.getsizeof，根据对象的内存占用进行估计。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> cachetools <span class="keyword">import</span> TTLCache, cached</span><br><span class="line"></span><br><span class="line"><span class="meta">@cached(<span class="params">cache=TTLCache(<span class="params">maxsize=<span class="number">100</span>, ttl=<span class="number">60</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x</span>):</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><font color="red">第三方模块，需要安装：pip3 install cachetools&gt;</font></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pretty_errors,给你的调试高亮</title>
      <link href="/2021/11/11/Fastapi/pretty-errors/"/>
      <url>/2021/11/11/Fastapi/pretty-errors/</url>
      
        <content type="html"><![CDATA[<h1 id="pretty-errors"><a href="#pretty-errors" class="headerlink" title="pretty_errors"></a>pretty_errors</h1><blockquote><p>python第三方组件，美化python错误</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pretty-errors</span><br></pre></td></tr></table></figure><h2 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pretty-errors</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/Fastapi/pretty-errors/error.png" alt="局部使用"></p><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pretty_errors</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/Fastapi/pretty-errors/global.png" alt="全局使用"></p><h2 id="取消使用"><a href="#取消使用" class="headerlink" title="取消使用"></a>取消使用</h2><p>只需要再次输入 python -m pretty_errors，然后输入 C 即可清除。</p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pretty_errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【重点】进行配置</span></span><br><span class="line">pretty_errors.configure(</span><br><span class="line">    separator_character = <span class="string">&#x27;*&#x27;</span>, <span class="comment">#指定堆栈跟踪行与错误信息之间的分隔符字符</span></span><br><span class="line">    filename_display    = pretty_errors.FILENAME_EXTENDED, <span class="comment">#指定文件名的显示方式</span></span><br><span class="line">    line_number_first   = <span class="literal">True</span>, <span class="comment">#指定行号是否放在文件名之前</span></span><br><span class="line">    display_link        = <span class="literal">True</span>, <span class="comment">#指定是否显示源码链接</span></span><br><span class="line">    lines_before        = <span class="number">5</span>, <span class="comment">#指定在错误行之前显示的堆栈跟踪行数</span></span><br><span class="line">    lines_after         = <span class="number">2</span>, <span class="comment">#指定在错误行之后显示的堆栈跟踪行数</span></span><br><span class="line">    line_color          = pretty_errors.RED + <span class="string">&#x27;&gt; &#x27;</span> + pretty_errors.default_config.line_color, <span class="comment">#指定行号的显示颜色</span></span><br><span class="line">    code_color          = <span class="string">&#x27;  &#x27;</span> + pretty_errors.default_config.line_color, <span class="comment">#指定代码行的显示颜色</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你所需要了解关于高并发的常识</title>
      <link href="/2021/10/09/Python/concurrency/"/>
      <url>/2021/10/09/Python/concurrency/</url>
      
        <content type="html"><![CDATA[<h1 id="多进程、多线程、协程"><a href="#多进程、多线程、协程" class="headerlink" title="多进程、多线程、协程"></a>多进程、多线程、协程</h1><h2 id="它们的区别"><a href="#它们的区别" class="headerlink" title="它们的区别"></a>它们的区别</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><ul><li>每个进程都有自己独立的内存空间，相互之间不会干扰。进程是操作系统分配资源的最小单位。</li><li>多进程适合于CPU密集型任务，可以利用多核处理器的优势，并且进程之间可以并行执行。</li><li>由于进程之间需要切换上下文，因此进程间通信比较复杂，需要使用特定的方法（如队列、管道等）。</li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>线程是进程内的执行单位，共享进程的内存空间。多个线程共享同一进程的资源。</li><li>多线程适合于I&#x2F;O密集型任务，可以在等待I&#x2F;O操作时切换到其他线程，提高效率。</li><li>由于使用全局解释器锁（GIL），Python 的多线程无法充分利用多核处理器的优势。在 CPU 密集型任务中，多线程可能不如多进程效果好。</li></ul><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><ul><li>协程是一种用户级的轻量级线程，由用户控制切换的时机。协程可以在一个线程中实现并发。</li><li>协程通过 yield 关键字进行挂起和恢复，可以在不同的协程之间切换执行，避免了线程切换的开销。</li><li>协程适合于高并发的网络编程或异步任务，在I&#x2F;O密集型场景中效果非常好。通过使用异步框架（如asyncio）、生成器或第三方库（如gevent）来实现</li></ul><p>多进程通常使用进程对象和队列来实现进程间的数据传递和同步。多线程通常使用线程对象和锁来实现线程间的同步与通信。协程通常使用异步async&#x2F;等待await关键字和事件循环来定义和管理协程。</p><h2 id="CPU密集型任务和I-O密集型任务"><a href="#CPU密集型任务和I-O密集型任务" class="headerlink" title="CPU密集型任务和I&#x2F;O密集型任务"></a>CPU密集型任务和I&#x2F;O密集型任务</h2><ul><li>CPU密集型任务（CPU-bound）： CPU密集型任务指的是任务主要消耗CPU资源的计算任务。这些任务通常需要大量的CPU运算，例如复杂的数学计算、图像&#x2F;视频处理、科学模拟等。在这种任务中，CPU的计算能力是影响任务执行速度的主要瓶颈，而I&#x2F;O操作相对较少。</li><li>I&#x2F;O密集型任务（I&#x2F;O-bound）： I&#x2F;O密集型任务指的是任务主要消耗I&#x2F;O资源的任务。这些任务通常需要频繁地进行输入&#x2F;输出操作，如磁盘读写、网络通信、数据库访问等。在这种任务中，任务的执行速度主要受限于I&#x2F;O操作的速度，而CPU的计算能力相对较少成为瓶颈。</li></ul><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><h3 id="全局解释器锁（GIL）"><a href="#全局解释器锁（GIL）" class="headerlink" title="全局解释器锁（GIL）"></a>全局解释器锁（GIL）</h3><p>简单来说，是一种互斥锁（或锁），只允许一个线程控制 Python 解释器。<br>这意味着在任何时间点只有一个线程可以处于执行状态。GIL 的影响对于执行单线程程序的开发人员来说是不可见的，但它可能是 CPU 密集型和多线程代码中的性能瓶颈。</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>线程安全是多线程或多进程编程中的一个概念，在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</p><h3 id="锁的作用"><a href="#锁的作用" class="headerlink" title="锁的作用"></a>锁的作用</h3><blockquote><p>锁是Python提供给我们能够自行操控线程切换的一种手段，使用锁可以让线程的切换变的有序。<br>一旦线程的切换变的有序后，各个线程之间对数据的访问、修改就变的可控，所以若要保证线程安全，就必须使用锁。</p></blockquote><p>threading模块中提供了5种最常见的锁，下面是按照功能进行划分：</p><ul><li>同步锁：lock（一次只能放行一个）</li><li>递归锁：rlock（一次只能放行一个）</li><li>条件锁：condition（一次可以放行任意个）</li><li>事件锁：event（一次全部放行）</li><li>信号量锁：semaphore（一次可以放行特定个）</li></ul><h3 id="同步锁Lock"><a href="#同步锁Lock" class="headerlink" title="同步锁Lock"></a>同步锁Lock</h3><ol><li>互斥指的是某一资源同一时刻仅能有一个访问者对其进行访问，具有唯一性和排他性，但是互斥无法限制访问者对资源的访问顺序，即访问是无序的</li><li>同步是指在互斥的基础上（大多数情况），通过其他机制实现访问者对资源的有序访问</li><li>同步其实已经实现了互斥，是互斥的一种更为复杂的实现，因为它在互斥的基础上实现了有序访问的特点</li></ol><h3 id="死锁现象"><a href="#死锁现象" class="headerlink" title="死锁现象"></a>死锁现象</h3><p>对于同步锁来说，一次acquire()必须对应一次release()，不能出现连续重复使用多次acquire()后再重复使用多次release()的操作，这样会引起死锁造成程序的阻塞，完全不动了<br>由于threading.Lock()对象中实现了enter__()与__exit()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="comment"># 自动加锁</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动解锁</span></span><br></pre></td></tr></table></figure><h3 id="递归锁RLock"><a href="#递归锁RLock" class="headerlink" title="递归锁RLock"></a>递归锁RLock</h3><p>递归锁是同步锁的一个升级版本，在同步锁的基础上可以做到连续重复使用多次acquire()后再重复使用多次release()的操作，但是一定要注意加锁次数和解锁次数必须一致，否则也将引发死锁现象。</p><h3 id="条件锁Condition"><a href="#条件锁Condition" class="headerlink" title="条件锁Condition"></a>条件锁Condition</h3><p>条件锁是在递归锁的基础上增加了能够暂停线程运行的功能。并且我们可以使用wait()与notify()来控制线程执行的个数。</p><h3 id="事件锁Event"><a href="#事件锁Event" class="headerlink" title="事件锁Event"></a>事件锁Event</h3><p>事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。<br>我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。</p><h3 id="信号量锁Semaphore"><a href="#信号量锁Semaphore" class="headerlink" title="信号量锁Semaphore"></a>信号量锁Semaphore</h3><p>信号量锁也是根据条件锁来做的，它与条件锁和事件锁的区别如下：</p><ul><li>条件锁：一次可以放行任意个处于“等待”状态的线程</li><li>事件锁：一次可以放行全部的处于“等待”状态的线程</li><li>信号量锁：通过规定，成批的放行特定个处于“上锁”状态的线程</li></ul><h2 id="协程-1"><a href="#协程-1" class="headerlink" title="协程"></a>协程</h2><p>定义协程的方式：</p><ol><li>通过async def定义且通过return返回值的函数为协程函数。协程函数的返回对象称为协程对象，是可等待对象的一种。</li><li>协程对象由await或asyncio.run()进行驱动，await只能用于async def定义的函数体中。</li><li>asyncio.gather()用来并发运行可等待对象序列。</li><li>通过async def定义且通过yield返回值的函数为协程生成器，可以用async for来进行迭代。</li><li>能够被await驱动的对象类型称为awaitable，即可等待对象。在Python标准库中，定义了特殊方法__await__()的对象都是可等待对象，主要有三类：coroutine，Task，Future。其中，coroutine就是协程函数的返回对象；Task为asycio.create_task(coroutine)的返回对象。</li><li>不使用await或asyncio.run驱动，而是直接调用协程函数，则协程函数会返回一个协程对象。</li></ol><p>从执行结果可以观察到很重要的一点：被驱动的协程对象都是立即返回，尽管最终的结果还未得到。其实协程本质上只是在用户程序和低层线程之间搭建了一个”管道“，从而把协程调度的工作委派了事件循环。我们不需要知道低层的运作原理，我们只需要确保在我们的代码中没有阻塞的代码，事件循环会在背后替我们处理并发。</p><p>引用自协程相比多线程有两点优势：</p><ol><li>没有线程切换的开销。</li><li>因为协程都是运行在一个线程上的，不存在由于多线程的”竞争机制“导致的同时写变量冲突等问题。因此，在协程中对于共享资源不需要加锁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝与浅拷贝，你知道区别吗</title>
      <link href="/2021/07/18/Python/copy/"/>
      <url>/2021/07/18/Python/copy/</url>
      
        <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h1><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote><p>浅拷贝创建一个新对象，该对象与原始对象共享内部的可变对象的引用。简而言之，浅拷贝只复制了对象的顶层元素，而没有复制内部的嵌套对象。当对嵌套对象进行修改时，原始对象和浅拷贝对象都会受到影响</p></blockquote><h3 id="使用copy-函数执行浅拷贝"><a href="#使用copy-函数执行浅拷贝" class="headerlink" title="使用copy()函数执行浅拷贝"></a>使用copy()函数执行浅拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">list2 = copy.copy(list1)  <span class="comment"># 执行浅拷贝</span></span><br><span class="line"></span><br><span class="line">list2[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># 输出: [1, 2, [3, 4, 5]]</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出: [1, 2, [3, 4, 5]]</span></span><br></pre></td></tr></table></figure><h3 id="或使用切片操作符-进行浅拷贝"><a href="#或使用切片操作符-进行浅拷贝" class="headerlink" title="或使用切片操作符[:]进行浅拷贝"></a>或使用切片操作符[:]进行浅拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">list2 = list1[<span class="number">1</span>:] <span class="comment"># 执行深拷贝</span></span><br><span class="line"></span><br><span class="line">list2[<span class="number">1</span>].append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># 输出: [1, 2, [3, 4, 5]]</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出: [2, [3, 4, 5]]</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote><p>深拷贝创建一个新对象，并递归地复制所有嵌套对象，而不仅仅是顶层元素。深拷贝使得原始对象和拷贝对象完全独立，彼此之间的修改互不影响。</p></blockquote><h3 id="使用deepcopy-函数可以执行深拷贝"><a href="#使用deepcopy-函数可以执行深拷贝" class="headerlink" title="使用deepcopy()函数可以执行深拷贝"></a>使用deepcopy()函数可以执行深拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">list2 = copy.deepcopy(list1)  <span class="comment"># 执行深拷贝</span></span><br><span class="line"></span><br><span class="line">list2[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出: [1, 2, [3, 4, 5]]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python生成器，你了解多少</title>
      <link href="/2021/05/12/Python/generator/"/>
      <url>/2021/05/12/Python/generator/</url>
      
        <content type="html"><![CDATA[<p>在Python中，生成器是一种特殊的迭代器。它们是一种用于创建迭代器的函数，在调用时不会立即执行，而是返回一个生成器对象。生成器对象可以按需逐个生成值，而不是一次性生成所有值。</p><span id="more"></span><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="生成器相对于其他方式更高效"><a href="#生成器相对于其他方式更高效" class="headerlink" title="生成器相对于其他方式更高效"></a>生成器相对于其他方式更高效</h2><ul><li>内存占用：生成器在迭代过程中一次只生成一个值，并且不会一次性生成所有值。这使得生成器在处理大量数据时，内存占用更低。可以通过比较生成器和其他方式在相同数据量下的内存占用情况来验证这一点。</li><li>延迟计算：生成器采用延迟计算的方式，只在需要时才会计算生成下一个值。相比于一次性计算所有值，这种延迟计算可以提高效率，在处理大量数据或复杂计算时尤为明显。可以通过比较生成器和其他方式在执行时间上的差异来验证这一点。</li><li>迭代效率：生成器是一种特殊的迭代器，它的执行过程更接近于原生的迭代器实现。相比于使用列表等容器进行迭代，生成器能够减少循环和条件判断等操作，从而提高迭代效率。可以通过比较生成器和其他方式在迭代过程中的执行速度来验证这一点。</li><li>空间复杂度：由于生成器是按需生成值，不需要保存生成的所有值，因此其空间复杂度通常比一次性生成所有值的方式更低。可以通过比较生成器和其他方式在处理大规模数据时的空间占用情况来验证这一点。</li></ul><h2 id="内存比较"><a href="#内存比较" class="headerlink" title="内存比较"></a>内存比较</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_size</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, sys.getsizeof(ret))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_size</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_size</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    array = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">test_1()   <span class="comment">#920</span></span><br><span class="line">test_2()   <span class="comment">#112</span></span><br></pre></td></tr></table></figure><h2 id="延迟计算"><a href="#延迟计算" class="headerlink" title="延迟计算"></a>延迟计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, (end - start)*<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    array = [num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000000</span>) <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> [num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> array]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_numbers</span>():</span><br><span class="line">    num = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> num &lt;= <span class="number">1000000</span>:</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    array = even_numbers()</span><br><span class="line">    <span class="keyword">return</span> [num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> array]</span><br><span class="line"></span><br><span class="line">test_1()   <span class="comment">#237</span></span><br><span class="line">test_2()   <span class="comment">#199</span></span><br></pre></td></tr></table></figure><h2 id="如何构造生成器"><a href="#如何构造生成器" class="headerlink" title="如何构造生成器"></a>如何构造生成器</h2><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">even_numbers</span>():</span><br><span class="line">    num = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> num &lt;= <span class="number">1000000</span>:</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">array =even_numbers()</span><br><span class="line"><span class="built_in">print</span>(array)   <span class="comment">#&lt;generator object even_numbers at 0x1016c2820&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array=(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(array)   <span class="comment">#&lt;generator object &lt;genexpr&gt; at 0x102871820&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">new_array=my_generator()</span><br><span class="line"><span class="built_in">print</span>(new_array)   <span class="comment">#&lt;generator object my_generator at 0x10c02e820&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升运速，你还在使用列表吗</title>
      <link href="/2021/04/18/Python/no-list/"/>
      <url>/2021/04/18/Python/no-list/</url>
      
        <content type="html"><![CDATA[<p><font color="green" size="4">列表是一个动态数组，它的元素在内存中是连续存储的。</font>在迭代过程中，由于连续内存访问的局部性原理，CPU的缓存能够更好地预取和缓存数据，从而提高访问效率。但是，对于列表来说，由于每个元素的大小可能不同，导致在迭代时内存访问的模式变得更加不规则，这可能会降低缓存的效果。</p><span id="more"></span><h1 id="替代列表迭代方式"><a href="#替代列表迭代方式" class="headerlink" title="替代列表迭代方式"></a>替代列表迭代方式</h1><h2 id="元组替代列表"><a href="#元组替代列表" class="headerlink" title="元组替代列表"></a>元组替代列表</h2><h3 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h3><p>元组在创建后不可修改，因此它们具有固定的大小。相比之下，列表是可变的，可以随时进行添加、删除和修改操作。由于元组的大小固定，它们在内存中占用的空间更小，不需要额外的内存来处理动态调整大小的操作。</p><h3 id="迭代速度"><a href="#迭代速度" class="headerlink" title="迭代速度"></a>迭代速度</h3><p>由于元组不可变，对元组进行迭代通常比对列表进行迭代更快。这是因为解释器可以优化遍历固定大小的元组，而对于可变的列表，则可能需要进行动态的大小调整和重新分配内存等操作。</p><h3 id="哈希性能"><a href="#哈希性能" class="headerlink" title="哈希性能"></a>哈希性能</h3><p>元组是不可变对象，因此它们可以作为字典的键或集合的成员。在计算哈希值时，不可变的元组只需计算一次，并可以重复使用，从而提高了哈希表的性能。相比之下，可变的列表无法作为字典的键或集合的成员，因为它们的哈希值可能会发生变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_size</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, sys.getsizeof(ret))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_size</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_size</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">test_1()  <span class="comment">#8040</span></span><br><span class="line">test_2()  <span class="comment">#8856</span></span><br></pre></td></tr></table></figure><h2 id="哈希表替代列表"><a href="#哈希表替代列表" class="headerlink" title="哈希表替代列表"></a>哈希表替代列表</h2><h3 id="查找速度更快"><a href="#查找速度更快" class="headerlink" title="查找速度更快"></a>查找速度更快</h3><p>在哈希表中，元素的查找速度通常为 O(1)，而在列表中，元素的查找速度通常为 O(n)，其中 n 是列表的长度。这是因为哈希表使用哈希函数将键映射到特定的位置，从而实现快速的查找。<br>例如，假设有一个学生名单，我们需要根据学生的学号查找其相关信息。使用哈希表，我们可以将学号作为键，将学生信息作为值存储在哈希表中，通过学号即可快速定位到对应的学生信息。而如果使用列表，则需要遍历整个列表来查找目标学号对应的学生信息。</p><h3 id="插入和删除的效率更高"><a href="#插入和删除的效率更高" class="headerlink" title="插入和删除的效率更高"></a>插入和删除的效率更高</h3><p>在哈希表中，插入和删除元素的时间复杂度通常也为 O(1)。而在列表中，插入和删除元素时，需要移动其他元素来保持顺序，其时间复杂度通常为 O(n)。<br>例如，假设我们要维护一个任务列表，需要频繁地插入和删除任务。使用哈希表，可以根据任务名称快速定位到对应的任务，并在 O(1) 时间内完成插入或删除操作。而如果使用列表，需要遍历列表来找到目标任务位置，并进行元素的移动操作。</p><h3 id="高效处理唯一性"><a href="#高效处理唯一性" class="headerlink" title="高效处理唯一性"></a>高效处理唯一性</h3><p>哈希表能够高效地处理唯一性要求，即保证存储的元素不重复。通过哈希表的特性，我们可以快速判断某个元素是否已经存在于哈希表中，从而避免重复的操作。<br>例如，假设我们需要统计一段文本中不同单词的出现次数。使用哈希表，我们可以将每个单词作为键，出现次数作为值，在遍历文本时，即可快速判断该单词是否已经存在于哈希表中，并更新对应的出现次数。而如果使用列表，每当遇到一个新单词时，需要遍历整个列表来判断是否已经存在。</p><h4 id="哈希表查询元素"><a href="#哈希表查询元素" class="headerlink" title="哈希表查询元素"></a>哈希表查询元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, (end - start)*<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line">array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">new_array =<span class="built_in">dict</span>(<span class="built_in">enumerate</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    <span class="keyword">return</span> array[<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    <span class="keyword">return</span> new_array[<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">test_1()   <span class="comment">#0.0021</span></span><br><span class="line">test_2()   <span class="comment">#0.0009</span></span><br></pre></td></tr></table></figure><h4 id="哈希表增加元素"><a href="#哈希表增加元素" class="headerlink" title="哈希表增加元素"></a>哈希表增加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, (end - start)*<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line">array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">new_array =<span class="built_in">dict</span>(<span class="built_in">enumerate</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    array.append(<span class="number">10001</span>)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    new_array[<span class="number">10001</span>]=<span class="number">10001</span></span><br><span class="line">    <span class="keyword">return</span> new_array</span><br><span class="line"></span><br><span class="line">test_1()   <span class="comment">#0.0021</span></span><br><span class="line">test_2()   <span class="comment">#0.0011</span></span><br></pre></td></tr></table></figure><h4 id="哈希表删除元素"><a href="#哈希表删除元素" class="headerlink" title="哈希表删除元素"></a>哈希表删除元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, (end - start)*<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line">array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">new_array =<span class="built_in">dict</span>(<span class="built_in">enumerate</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    array.remove(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    <span class="keyword">del</span> new_array[<span class="number">1000</span>]</span><br><span class="line">    <span class="keyword">return</span> new_array</span><br><span class="line"></span><br><span class="line">test_1()   <span class="comment">#0.0181</span></span><br><span class="line">test_2()   <span class="comment">#0.0011</span></span><br></pre></td></tr></table></figure><h2 id="推荐列表推导式"><a href="#推荐列表推导式" class="headerlink" title="推荐列表推导式"></a>推荐列表推导式</h2><p>列表推导式比显式的遍历更快速</p><ul><li>优化的底层实现：列表推导式是在底层进行优化的。Python 解释器使用了一些技巧来提高列表推导式的性能，例如内部的循环展开、迭代器和生成器的使用等。这些优化可以减少中间步骤，提高执行效率。</li><li>原生的 C 实现：Python 的列表推导式是通过底层的 C 代码来实现的。与用 Python 代码编写的遍历相比，C 代码的执行速度更快，因为 C 是一种编译语言，能够直接转化为机器码并执行。这使得列表推导式能够更高效地执行循环和条件操作，从而提高性能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(func.__name__, (end - start)*<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    new_list=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        new_list.append(x)</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line">test_1()  <span class="comment">#0.00905</span></span><br><span class="line">test_2()  <span class="comment">#0.00476</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特立独行的运算符</title>
      <link href="/2021/03/24/Python/operators/"/>
      <url>/2021/03/24/Python/operators/</url>
      
        <content type="html"><![CDATA[<h1 id="高效的运算符"><a href="#高效的运算符" class="headerlink" title="高效的运算符"></a>高效的运算符</h1><h2 id="链式比较"><a href="#链式比较" class="headerlink" title="链式比较"></a>链式比较</h2><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">5</span></span><br><span class="line">ans=<span class="number">1</span>&lt;i&lt;<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(ans)    <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h3 id="合集"><a href="#合集" class="headerlink" title="合集"></a>合集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">5</span></span><br><span class="line">ans=<span class="number">10</span>&gt;i&lt;=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(ans)    <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h2 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;c&quot;</span>: <span class="number">3</span>, <span class="string">&quot;d&quot;</span>: <span class="number">4</span>&#125;</span><br><span class="line"> </span><br><span class="line">merged_dict = dict1 | dict2</span><br><span class="line"><span class="built_in">print</span>(merged_dict)    <span class="comment">#&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神奇的语法糖</title>
      <link href="/2021/03/15/Python/sugar/"/>
      <url>/2021/03/15/Python/sugar/</url>
      
        <content type="html"><![CDATA[<h1 id="精简却功能强大的语法糖"><a href="#精简却功能强大的语法糖" class="headerlink" title="精简却功能强大的语法糖"></a>精简却功能强大的语法糖</h1><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><blockquote><p>在Python中，三元表达式的形式为 value_if_true if condition else value_if_false。这种表达式的作用是根据条件的真假选择两个值中的一个作为整个表达式的结果。<br>使用三元表达式可以简化某些条件判断的语法，并且可以在一行中完成相应的逻辑操作。这在某些情况下可以提高代码的可读性和简洁性。</p></blockquote><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">if</span> x&gt;<span class="number">2</span> esle x)   <span class="comment">#2</span></span><br></pre></td></tr></table></figure><h3 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="number">10</span>,<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>((b, a) [a &lt; b])   <span class="comment">#20</span></span><br></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)])   <span class="comment">#[0,1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(&#123;i:i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)&#125;)   <span class="comment">#&#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>((i:i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)))   <span class="comment">#&lt;generator object &lt;genexpr&gt; at 0x101ed0820&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在字典应用"><a href="#在字典应用" class="headerlink" title="在字典应用"></a>在字典应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">22</span></span><br><span class="line">person_info = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: age,</span><br><span class="line">    <span class="string">&quot;category&quot;</span>: <span class="string">&quot;Adult&quot;</span> <span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">else</span> <span class="string">&quot;Child&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(person_info)   <span class="comment"># &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 22, &#x27;category&#x27;: &#x27;Adult&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套条件判断"><a href="#嵌套条件判断" class="headerlink" title="嵌套条件判断"></a>嵌套条件判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1&quot;</span> <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="string">&quot;2&quot;</span> <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> <span class="string">&quot;3&quot;</span>)   <span class="comment">#3</span></span><br></pre></td></tr></table></figure><h3 id="结合lambda"><a href="#结合lambda" class="headerlink" title="结合lambda"></a>结合lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x:x+<span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">4</span> <span class="keyword">else</span> x)(x))   <span class="comment">#6</span></span><br></pre></td></tr></table></figure><h3 id="结合print"><a href="#结合print" class="headerlink" title="结合print"></a>结合print</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="keyword">if</span> x &gt;<span class="number">4</span> <span class="keyword">else</span> <span class="built_in">print</span>(x-<span class="number">1</span>)   <span class="comment">#5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解包有哪些骚操作</title>
      <link href="/2021/03/04/Python/unpack/"/>
      <url>/2021/03/04/Python/unpack/</url>
      
        <content type="html"><![CDATA[<h1 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h1><blockquote><p>在 Python 中，解包（Unpacking）是指将可迭代对象（例如列表、元组、集合等）中的元素一一分配给变量的过程。解包可以使得代码更加简洁和可读，并且可以同时对多个变量进行赋值。</p></blockquote><h2 id="基本解包"><a href="#基本解包" class="headerlink" title="基本解包"></a>基本解包</h2><blockquote><p>将可迭代对象中的元素按顺序赋值给对应数量的变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x,y,z)    <span class="comment">#&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="扩展解包"><a href="#扩展解包" class="headerlink" title="扩展解包"></a>扩展解包</h2><blockquote><p>使用 * 运算符将可迭代对象中的剩余元素解包为一个列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, *y, z = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)  <span class="comment"># x=&#x27;a&#x27;, y=[&#x27;b&#x27;, &#x27;c&#x27;], z=&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="忽略特定元素"><a href="#忽略特定元素" class="headerlink" title="忽略特定元素"></a>忽略特定元素</h2><blockquote><p>使用 _ 或其他不需要的变量名来标识不关心的元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, *_ = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)  <span class="comment"># x=&#x27;a&#x27;，其余的元素被忽略</span></span><br></pre></td></tr></table></figure><h2 id="嵌套解包"><a href="#嵌套解包" class="headerlink" title="嵌套解包"></a>嵌套解包</h2><blockquote><p>对嵌套的可迭代对象进行解包，可以同时解开多层嵌套。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, *y, (z, w) = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, (<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>))  <span class="comment"># x=&#x27;a&#x27;, y=[&#x27;b&#x27;, &#x27;c&#x27;], z=&#x27;d&#x27;, w=&#x27;e&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h2><blockquote><p>*args 将接收解包后的参数作为一个元组，在函数内部可以遍历和处理这些参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">point</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">foo_list = <span class="string">&#x27;12&#x27;</span></span><br><span class="line">point(*foo_list)     <span class="comment">#1 2</span></span><br></pre></td></tr></table></figure><h2 id="kw"><a href="#kw" class="headerlink" title="**kw"></a>**kw</h2><blockquote><p>**kw 是一种在函数定义和函数调用中处理关键字参数的语法。它允许你在函数内部以字典的方式访问和操作这些参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">point</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">foo_list = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">point(**foo_list)    <span class="comment">#1 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
